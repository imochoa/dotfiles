# ~/.bashrc: executed by bash(1) for non-login shells.
# see /usr/share/doc/bash/examples/startup-files (in the package bash-doc)
# for examples

# If not running interactively, don't do anything
case $- in
    *i*) ;;
      *) return;;
esac

# don't put duplicate lines or lines starting with space in the history.
# See bash(1) for more options
HISTCONTROL=ignoreboth

# append to the history file, don't overwrite it
shopt -s histappend

# for setting history length see HISTSIZE and HISTFILESIZE in bash(1)
HISTSIZE=1000
HISTFILESIZE=2000

# check the window size after each command and, if necessary,
# update the values of LINES and COLUMNS.
shopt -s checkwinsize

# If set, the pattern "**" used in a pathname expansion context will
# match all files and zero or more directories and subdirectories.
#shopt -s globstar

# make less more friendly for non-text input files, see lesspipe(1)
[ -x /usr/bin/lesspipe ] && eval "$(SHELL=/bin/sh lesspipe)"

# set variable identifying the chroot you work in (used in the prompt below)
if [ -z "${debian_chroot:-}" ] && [ -r /etc/debian_chroot ]; then
    debian_chroot=$(cat /etc/debian_chroot)
fi

# set a fancy prompt (non-color, unless we know we "want" color)
case "$TERM" in
    xterm-color|*-256color) color_prompt=yes;;
esac

# uncomment for a colored prompt, if the terminal has the capability; turned
# off by default to not distract the user: the focus in a terminal window
# should be on the output of commands, not on the prompt
#force_color_prompt=yes

if [ -n "$force_color_prompt" ]; then
    if [ -x /usr/bin/tput ] && tput setaf 1 >&/dev/null; then
	# We have color support; assume it's compliant with Ecma-48
	# (ISO/IEC-6429). (Lack of such support is extremely rare, and such
	# a case would tend to support setf rather than setaf.)
	color_prompt=yes
    else
	color_prompt=
    fi
fi

if [ "$color_prompt" = yes ]; then
    PS1='${debian_chroot:+($debian_chroot)}\[\033[01;32m\]\u@\h\[\033[00m\]:\[\033[01;34m\]\w\[\033[00m\]\$ '
else
    PS1='${debian_chroot:+($debian_chroot)}\u@\h:\w\$ '
fi
unset color_prompt force_color_prompt

# If this is an xterm set the title to user@host:dir
case "$TERM" in
xterm*|rxvt*)
    PS1="\[\e]0;${debian_chroot:+($debian_chroot)}\u@\h: \w\a\]$PS1"
    ;;
*)
    ;;
esac

# enable color support of ls and also add handy aliases
if [ -x /usr/bin/dircolors ]; then
    test -r ~/.dircolors && eval "$(dircolors -b ~/.dircolors)" || eval "$(dircolors -b)"
    alias ls='ls --color=auto'
    #alias dir='dir --color=auto'
    #alias vdir='vdir --color=auto'

    alias grep='grep --color=auto'
    alias fgrep='fgrep --color=auto'
    alias egrep='egrep --color=auto'
fi

# colored GCC warnings and errors
#export GCC_COLORS='error=01;31:warning=01;35:note=01;36:caret=01;32:locus=01:quote=01'



# Alias definitions.
# You may want to put all your additions into a separate file like
# ~/.bash_aliases, instead of adding them here directly.
# See /usr/share/doc/bash-doc/examples in the bash-doc package.

if [ -f ~/.bash_aliases ]; then
    . ~/.bash_aliases
fi

# Function definitions
if [ -f ~/.bash_functions ]; then
    source ~/.bash_functions
fi

# enable programmable completion features (you don't need to enable
# this, if it's already enabled in /etc/bash.bashrc and /etc/profile
# sources /etc/bash.bashrc).
if ! shopt -oq posix; then
  if [ -f /usr/share/bash-completion/bash_completion ]; then
    . /usr/share/bash-completion/bash_completion
  elif [ -f /etc/bash_completion ]; then
    . /etc/bash_completion
  fi
fi

export PATH=$HOME/tools/nvim:$PATH

# Swaps caps-lock and ESC keys
setxkbmap -option caps:swapescape

# Configure editors
# WORKING
# # set -o vi
# alias vim=nvim
# alias vi=nvim
# export VISUAL="nvim"
# export EDITOR="$VISUAL"


# the default nvr executable is in local/bin
export PATH="~/.local/bin:$PATH"

if [ -n "$NVIM_LISTEN_ADDRESS" ]; then
  set -o emacs
  # Terminal within neovim!
  export PS1="[nvr]$PS1"
  # VISUAL & EDITOR should be set by ~/.config/nvim/init.vim!

#   if [ -x "$(command -v nvr)" ]; then
#       # Use neovim-remote to avoid nested neovim instances
#       alias nvim=nvr
#       export VISUAL="nvim -cc tabedit --remote-wait +'set bufhidden=wipe'"
#     else
#       alias nvim='echo "No nesting without neovim-remote!"'
#     fi

   # So that <C-x><C-e> works
   # set -o emacs

else
  # Normal terminal
  # set -o vi
  set -o emacs
  alias vim=nvim
  alias vi=nvim
  export VISUAL="nvim"
  export EDITOR="$VISUAL"
  # export VISUAL="nvim"
  neofetch
fi
export EDITOR="$VISUAL"
alias v="$VISUAL"



# if [ -n "$NVIM_LISTEN_ADDRESS" ]; then
#  # Running inside of neovim!
#   export PS1="in neovim » "
#   set -o emacs # Otherwise <C-x><C-e> won't work
#   alias nvim="~/.config/nvim/py3-provider/bin/nvr -cc tabedit --remote-wait +'set bufhidden=wipe'"
#   # export VISUAL="nvr -cc tabedit --remote-wait +'set bufhidden=wipe'"
# fi

# if [ -n "$NVIM_LISTEN_ADDRESS" ]; then
#   # If you're using nvim then you already have the vim mappings! Don't nest them!
#   set -o emacs

#   if [ -x "$(command -v ~/.config/nvim/py3-provider/bin/nvr)" ]; then
#     # alias nvim=nvr # might not find nvr
#     alias nvim=~/.config/nvim/py3-provider/bin/nvr 
#   else
#     alias nvim='echo "No nesting without neovim-remote!"'
#   fi
# fi



# "\C-o": operate-and-get-next
# With this, once you have selected a command from history (e.g. via Vim search) hit Ctrl-O instead of Enter and Bash will run the command and insert the next command from history, ready to run.
# See Readline Command Names section in the Bash manpage for complete list.

bind -x '"\C-l": clear'

# HAS TO BE AT THE END
# if [ -n "$NVIM_LISTEN_ADDRESS" ]; then
#   # If you're using nvim then you already have the vim mappings! Don't nest them!
#   set -o emacs
#   export PS1="in neovim » "
# fi

# if [ -n "$NVIM_LISTEN_ADDRESS" ]; then
#   # If you're using nvim then you already have the vim mappings! Don't nest them!
#   set -o emacs
#   export PS1="in neovim » "

#   if [ -x "$(command -v ~/.config/nvim/py3-provider/bin/nvr)" ]; then
#     # alias nvim=nvr # might not find nvr
#     alias nvim=~/.config/nvim/py3-provider/bin/nvr 
#     export VISUAL="nvim"
#     export EDITOR="$VISUAL"
#   else
#     alias nvim='echo "No nesting without neovim-remote!"'
#   fi
# fi

# FINALLY WORKING
# # Move to using nvr on local install....
# if [ -n "$NVIM_LISTEN_ADDRESS" ]; then

#   set -o emacs
#   export PS1="in neovim » "
#   # alias nvim=~/.config/nvim/py3-provider/bin/nvr 
#   alias nvim=nvr 
#   export VISUAL="nvim -cc tabedit --remote-wait +'set bufhidden=wipe'"
#   # export VISUAL="nvr -cc tabedit --remote-wait +'set bufhidden=wipe'"
# else
#   set -o vi
#   export VISUAL="nvim"
# fi
# export EDITOR="$VISUAL"
# alias v="$VISUAL"

# Improved
# Move to using nvr on local install....

# # the default nvr executable is in local/bin
# export PATH="~/.local/bin:$PATH"

# if [ -n "$NVIM_LISTEN_ADDRESS" ]; then
#   # Terminal within neovim!
#   set -o emacs # So that <C-x><C-e> works
#   # export PS1="in neovim » "
#   # export PS1="in neovim » "
#   export PS1="[nvr]$PS1"

#   # PS1='${debian_chroot:+($debian_chroot)}\[\033[01;32m\]\u@\h\[\033[00m\]:\[\033[01;34m\]\w\[\033[00m\]\$ '
#   # export PS1="[NVR]\[\e]0;${debian_chroot:+($debian_chroot)}\u@\h: \w\a\]$PS1"


#   if [ -x "$(command -v nvr)" ]; then
#       # Use neovim-remote to avoid nested neovim instances
#       alias nvim=nvr
#       export VISUAL="nvim -cc tabedit --remote-wait +'set bufhidden=wipe'"
#     else
#       alias nvim='echo "No nesting without neovim-remote!"'
#     fi
# else
#   # Normal terminal
#   set -o vi
#   # export VISUAL="nvim"
#   neofetch
# fi
# export EDITOR="$VISUAL"
# alias v="$VISUAL"

