# ~/.bashrc: executed by bash(1) for non-login shells.
# see /usr/share/doc/bash/examples/startup-files (in the package bash-doc)
# for examples

# If not running interactively, don't do anything
case $- in
    *i*) ;;
      *) return;;
esac

# Normally, '**' = '*', but now '**' will act as a recursive '*' through all directory levels
shopt -s globstar

# don't put duplicate lines or lines starting with space in the history.
# See bash(1) for more options
# HISTCONTROL=ignoreboth
export HISTCONTROL=erasedups	# when adding an item to history, delete itentical commands upstream

# append to the history file, don't overwrite it
shopt -s histappend

# for setting history length see HISTSIZE and HISTFILESIZE in bash(1)
# HISTSIZE=1000
export HISTSIZE=10000		# save 10000 items in history
# HISTFILESIZE=2000
export HISTFILESIZE=2000

# check the window size after each command and, if necessary,
# update the values of LINES and COLUMNS.
shopt -s checkwinsize

# If set, the pattern "**" used in a pathname expansion context will
# match all files and zero or more directories and subdirectories.
#shopt -s globstar

# make less more friendly for non-text input files, see lesspipe(1)
[ -x /usr/bin/lesspipe ] && eval "$(SHELL=/bin/sh lesspipe)"

# set variable identifying the chroot you work in (used in the prompt below)
if [ -z "${debian_chroot:-}" ] && [ -r /etc/debian_chroot ]; then
    debian_chroot=$(cat /etc/debian_chroot)
fi

# set a fancy prompt (non-color, unless we know we "want" color)
case "$TERM" in
    xterm-color|*-256color) color_prompt=yes;;
esac

# uncomment for a colored prompt, if the terminal has the capability; turned
# off by default to not distract the user: the focus in a terminal window
# should be on the output of commands, not on the prompt
#force_color_prompt=yes

if [ -n "$force_color_prompt" ]; then
    if [ -x /usr/bin/tput ] && tput setaf 1 >&/dev/null; then
	# We have color support; assume it's compliant with Ecma-48
	# (ISO/IEC-6429). (Lack of such support is extremely rare, and such
	# a case would tend to support setf rather than setaf.)
	color_prompt=yes
    else
	color_prompt=
    fi
fi

# TODO Get inspiration from
#  https://github.com/nelstrom/dotfiles/blob/master/bashrc
# # Bash customisations to be syncronised between machines.
# export PS1='\[\e[1;34m\][\u@\h \W]\$\[\e[0m\] '

if [ "$color_prompt" = yes ]; then
    PS1='${debian_chroot:+($debian_chroot)}\[\033[01;32m\]\u@\h\[\033[00m\]:\[\033[01;34m\]\w\[\033[00m\]\$ '
else
    PS1='${debian_chroot:+($debian_chroot)}\u@\h:\w\$ '
fi
unset color_prompt force_color_prompt

# If this is an xterm set the title to user@host:dir
case "$TERM" in
xterm*|rxvt*)
    PS1="\[\e]0;${debian_chroot:+($debian_chroot)}\u@\h: \w\a\]$PS1"
    ;;
*)
    ;;
esac

# colored GCC warnings and errors
#export GCC_COLORS='error=01;31:warning=01;35:note=01;36:caret=01;32:locus=01:quote=01'



# Alias definitions.
# You may want to put all your additions into a separate file like
# ~/.bash_aliases, instead of adding them here directly.
# See /usr/share/doc/bash-doc/examples in the bash-doc package.

if [ -f ~/.bash_aliases ]; then
    . ~/.bash_aliases
fi

# Function definitions
if [ -f ~/.bash_functions ]; then
    source ~/.bash_functions
fi

# enable programmable completion features (you don't need to enable
# this, if it's already enabled in /etc/bash.bashrc and /etc/profile
# sources /etc/bash.bashrc).
if ! shopt -oq posix; then
  if [ -f /usr/share/bash-completion/bash_completion ]; then
    . /usr/share/bash-completion/bash_completion
  elif [ -f /etc/bash_completion ]; then
    . /etc/bash_completion
  fi
fi


# If running within Ranger, modify the PS1
if [ -n "$RANGER_LEVEL" ]; then export PS1="[ranger]$PS1"; fi

# CONFIGURE EDITOR
# --------------------------------------------------------------------------------


# Swaps caps-lock and ESC keys
setxkbmap -option caps:swapescape

# NVR (detect terminals within neovim)
# the default nvr executable is in local/bin
export PATH=$HOME/tools/nvim:$PATH
export PATH="~/.local/bin:$PATH"

if [ -n "$NVIM_LISTEN_ADDRESS" ]; then
  # INSIDE OF NEOVIM!
  export PS1="[nvr]${PS1}"
  # VISUAL used to be set by ~/.config/nvim/init.vim!  (dotfiles/nvim/after/general-settings.vim)
  export $VISUAL="nvr -cc split --remote-wait +'set bufhidden=wipe'"

  alias v="nvr"
  alias vi="nvr"
  alias vim="nvr"
  alias nvim="nvr"
  alias neovim="nvr"
else
  export VISUAL="nvim"

  alias v="${VISUAL}"
  alias vi="${VISUAL}"
  alias vim="${VISUAL}"
  alias neovim="${VISUAL}"
fi

# Propagate the results
export EDITOR="${VISUAL}"

# Emacs vs vim mode
# Emacs so that <C-x><C-e> activates vim editing-mode within nvr
set -o emacs
# set -o vi

# "\C-o": operate-and-get-next
# With this, once you have selected a command from history (e.g. via Vim search) 
# hit Ctrl-O instead of Enter and Bash will run the command and insert the next 
# command from history, ready to run.  See Readline Command Names section in the Bash manpage for 
# complete list.

bind -x '"\C-l": clear'

# neofetch

# for debugging nautilus...
# G_DEBUG="all" NAUTILUS_DEBUG="All" nautilus

# [ -f ~/.fzf.bash ] && source ~/.fzf.bash
