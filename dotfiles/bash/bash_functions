#!/usr/bin/env bash
# ~/.bash_functions


# Variables
FEEDBACK_COLOR='\033[0;36m'
NO_COLOR='\033[0m'


# For going inside running docker containers
goinside(){
    docker exec -it $1 bash -c "stty cols $COLUMNS rows $LINES && bash";
}
_goinside(){
    COMPREPLY=( $(docker ps --format "{{.Names}}" -f name=$2) );
}
complete -F _goinside goinside;
export -f goinside;


# Cronometer
alias crono='stf=$(date +%s.%N);for ((;;));do ctf=$( date +%s.%N );echo -en "\r$(date -u -d "0 $ctf sec - $stf sec" "+%H:%M:%S.%N")";done'


# Starting a simple HTTP server
#@server
#+this command starts a simple python3 HTTP server in the current working dir
#
# It takes 1 optional argument: the server's port server (by default 8000)
#            server       # Starts a server at 8000
#            server  7999 # Starts a server at 7999
#
function server() {
    local port="${1:-8000}"
    printf '\033[0;36m%s\033[0m\n' "Starting a py3 HTTP server for ${port}";
    python3 -m http.server "$port"
}

#@pool
#+this command runs a file with one command per line using a pool of "P" workers
#
# It takes 1 mandatory argument:               pool /file/to/be/run.txt
#      and optionally, the worker count:       pool /file/to/be/run.txt 5
#
function pool() {
    local pcount="${2:-4}"
    local logfile=$(mktemp --suffix=.log)
    printf '\033[0;36m%s\033[0m\n' "Running the commands in ${1} with ${pcount} workers [LOGFILE AT ${logfile}]!";
    cat "${1}" | xargs -P "${pcount}" -I % sh -c '%' 2>&1 | tee ${logfile};
    printf '\033[0;36m%s\033[0m\n' "Finished running ${1} [LOGFILE AT ${logfile}]!";
}
